use std::collections::HashMap;
trait Sort<K, V> {
    fn sol(&self) -> Vec<(&K, &V)>;
}
impl<K, V> Sort<K, V> for HashMap<K, V>
where
    K: Ord,
{
    fn sol(&self) -> Vec<(&K, &V)> {
        let mut sorted_pairs: Vec<(&K, &V)> = self.iter().collect();
        sorted_pairs.sort_by(|a, b| a.0.cmp(b.0));
        sorted_pairs
    }
}
fn main() {
    let mut my_map: HashMap<&str, i32> = HashMap::new();
    my_map.insert("abc", 6605);
    my_map.insert("def", 6606);
    my_map.insert("ghi", 6604);
    println!("Befor sorting = {:?}", my_map);
    let sorted_pairs = my_map.sol();
    println!("After sorting = {:?}", sorted_pairs);
}